name: CI-CD

on:
  push:
    branches: 
      - main

  
jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
      - uses: act10ns/slack@v2
        with:
          status: starting
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          message: ${{ github.event.repository.name }} - iniciando testes, constru√ß√£o e envio...
        if: always()
        
      - name: Checkout
        uses: actions/checkout@v4.1.7
        
      - name: Variables
        id: vars
        run: echo "::set-output name=SHORT_COMMIT_ID::$(git rev-parse --short HEAD)"
          
      # - name: Autentica√ß√£o no Docker Hub
      #   id: docker-authentication
      #   uses: docker/login-action@v3.2.0
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USER }}
      #     password: ${{ secrets.DOCKERHUB_PWD }}

      # - name: Constru√ß√£o de imagem Docker
      #   id: docker-images
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     push: true
      #     tags: |
      #       flaviobianchetti2/tech-news:v1
      #       flaviobianchetti2/tech-news:latest

      - name: Local DynamoDB Docker
        id: dynamodb
        uses: rrainn/dynamodb-action@v4.0.0
        # env:
        #   ENVIRONMENT: PDM-SIA
        #   # Preciso colocar as chaves abaixo em secret?
        #   APP_KEY: RANDOM-APP-KEY
        #   AES_KEY: z$C&F)J@NcRfUjWnZr4u7x!A%D*G-KaP

        #   AWS_REGION_NAME: us-east-1
        #   AWS_ENDPOINT_URL: http://127.0.0.1:4566
        #   AWS_PROFILE: local
        #   # Tem que colocar as senhas abaixo em secret?
        #   AWS_ACCESS_KEY_ID: test
        #   AWS_SECRET_ACCESS_KEY: test
        with:
          # dbPath: http://localhost
          # sharedDb: http://localhost
          # delayTransientStatuses:
          # optimizeDbBeforeStartup:
          port: 8000
          # port: 4566
          cors: "*"

      # - name: test - configure aws credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   # env:
      #   #   AWS_REGION_NAME: us-east-1
      #   #   AWS_ACCESS_KEY_ID: test
      #   #   AWS_SECRET_ACCESS_KEY: test
      #   with:
      #     # role-skip-session-tagging: true
      #     # aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
      #     # aws-region: ${{ env.AWS_REGION_NAME }}
      #     # aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
      #     # audience: http://127.0.0.1:4566
      #     role-to-assume: arn:aws:iam::xxxxxxxxxxxx:role/github-actions
      #     aws-access-key-id: us-east-1
      #     aws-region: test
      #     aws-secret-access-key: test
      #     # audience: sts.amazonaws.com

      - name: instance resources configuration
        env:
          ENVIRONMENT: TECH-NEWS
          STACK_NAME: LocalStack
          AWS_REGION_NAME: us-east-1
          AWS_ENDPOINT_URL: http://amazon/dynamodb-local:8000
          AWS_PROFILE: local
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          # TEMPLATE_FILE: https://github.com/flavio-bianchetti/tech-news/blob/main/local-resources.yaml
          TEMPLATE_FILE: local-resources.yaml
        # run: |
        #   if [ -f "$VENV" ]; then
        #     source $VENV
        #   else
        #     echo "VENV file not found: $VENV"
        #     exit 1
        #   fi
        run: |
          aws configure set region ${{ env.AWS_PROFILE }} --profile ${{ env.AWS_PROFILE }}
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile ${{ env.AWS_PROFILE }}
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile ${{ env.AWS_PROFILE }}
          AWS_PROFILE=${{ env.AWS_PROFILE }} aws --endpoint-url ${{ env.AWS_ENDPOINT_URL }} cloudformation deploy --template-file ${{ env.TEMPLATE_FILE }} --stack-name ${{ env.STACK_NAME }}
          aws dynamodb list-tables --profile local --endpoint-url ${{ env.AWS_ENDPOINT_URL }}
        # aws configure set endpoint_url ${{ env.AWS_ENDPOINT_URL }} --profile ${{ env.AWS_PROFILE }}
        # aws --endpoint-url ${{ env.AWS_ENDPOINT_URL }} cloudformation deploy --template-file ${{ env.TEMPLATE_FILE }} --stack-name ${{ env.STACK_NAME }}
        # aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
        # alias awslocal="AWS_PROFILE=local aws --endpoint-url http://localhost:8000"
        # awslocal cloudformation deploy --template-file local-resources.yaml --stack-name LocalStack
        # run: |
        #   source $VENV
        # AWS_PROFILE=${{ env.AWS_PROFILE }} aws --endpoint-url ${{ env.AWS_ENDPOINT_URL }} cloudformation deploy --template-file ${{ env.TEMPLATE_FILE }} --stack-name ${{ env.STACK_NAME }} --endpoint-url ${{ env.AWS_ENDPOINT_URL }}
        # awslocal cloudformation deploy --template-file ${{ env.TEMPLATE_FILE }} --stack-name ${{ env.STACK_NAME }}
        # run: |
        #   source $VENV
        #   alias awslocal="AWS_PROFILE=${{ env.AWS_PROFILE }} aws --endpoint-url ${{ env.AWS_ENDPOINT_URL }}"
        #   awslocal cloudformation deploy --template-file local-resources.yaml --stack-name ${{ env.STACK_NAME }}
          

      - name: stop containers
        id: stop-containers
        if: always()
        run: docker compose -f 'docker-compose.yml' down
          
  
      # TODO: Notify on Slack when new version is released :rocket:
      - name: Send GitHub Action Messages to Slack Workflow
        # id: slack
        uses: act10ns/slack@v2.1.0
        # uses: slackapi/slack-github-action@v1.26.0
        # uses: rtCamp/action-slack-notify@v2
        # √∫ltimo que funcionou
        # uses: alonsohki/slack-webhook-payload@v1
        env:
        #   SLACK_WEBHOOK: ${{ secrets.SLACK_ROBOTICS_CI_WEBHOOK }}
        # run: |
        #   if [[ -z "$SLACK_WEBHOOK" ]]; then
        #     echo "slack_webhook_exists=false" >> $GITHUB_ENV
        #   else
        #     echo "slack_webhook_exists=true" >> $GITHUB_ENV
        #   fi
          # Inserir a chave do slack em secrets ou pegar o nome certo
          # xoxe.xoxp-1-Mi0yLTI3NDcxOTMzNDY4ODEtNDEwMDAwMDU5MjU5NC03Mzg5OTY2NDg3NjIyLTczOTkwNzg3NjAyOTItZmQzYjJkNmM5YTgyYWUxMTFiMmJlODI0ZDIzOWU1YTc2ZWZkMDdhMDcyYWVlNzBiMmE4ODQwN2MzMzk4MDZjNQ
          # SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          # SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          ICON_URL: "https://s3.dualstack.us-east-2.amazonaws.com/pythondotorg-assets/media/community/logos/python-logo-only.png"
          # canal github-actions - colocar no secret?
          # CHANNEL_ID: C07BNTR8E4S
          # CHANNEL_ID: teste-de-cicd
          # USERNAME: GitHub-CI
          # pretext: Acionado via {{eventName}} por {{actor}} {{ou a√ß√£o "action"}} {{ref}} `{{diffRef}}`
          # title: GitHub Actions
          # title_link: https://support.github.com
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          # config: .github/slack.yml
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          config: .github/workflows/slack.yml
        if: always()
          # ultimo que funcionou
          # slack-webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          # ultimo que funcionou
          # content: |
          #   {
          #     "blocks": [
          #       {
          #         "type": "divider"
          #       },
          #       {
          #         "type": "image",
          #         "image_url": "${{ env.ICON_URL }}",
          #         "image_width": 100,
          #         "image_height": 100,
          #         "alt_text": "logo Python"
          #       },
          #       {
          #         "type": "section",
          #         "text": {
          #           "type": "mrkdwn",
          #           "text": ":rocket: TECH-NEWS - ${{ github.event.release.tag_name || github.event.release.name || 'N√£o dispon√≠vel' }}"
          #         }
          #       },
          #       {
          #         "type": "section",
          #         "text": {
          #           "type": "mrkdwn",
          #           "text": "Resultado da constru√ß√£o: ${{ job.status }}* \n Altera√ß√µes: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
          #         }
          #       }
          #     ]
          #   }

          # content: ":rocket: TECH-NEWS - ${{ github.event.release.tag_name || github.event.release.name }} - Resultado da constru√ß√£o: ${{ job.status }}\nLink-PR: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
          # content: |
          #   { "text": "mensagem de teste" }
          # channel-id: ${{ env.CHANNEL_ID }}
          # SLACK_CHANNEL: ${{ env.CHANNEL_ID }}
          # SLACK_CHANNEL: teste-de-cicd
          # SLACK_TITLE: Post Title
          # SLACK_USERNAME: flavio-bianchetti
          # SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          # SLACK_MESSAGE: ":rocket: TECH-NEWS - ${{ github.event.release.tag_name || github.event.release.name }} - Resultado da constru√ß√£o: ${{ job.status }}\nLink-PR: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
          # SLACK_MESSAGE: ":rocket: TECH-NEWS"
          # slack-optional-icon_emoji: ${{ env.ICON_URL }}
          # slack-message: "release: üöÄ PDM-IAM-SERVICE ${{  }}"
          # pretext: Acionado via {{eventName}} por {{actor}} {{ou a√ß√£o "action"}} {{ref}} `{{diffRef}}`
          # title: GitHub Actions
          # title_link: https://support.github.com

          # slack-message: ":rocket: PDM-IAM-SERVICE - ${{ github.event.release.tag_name || github.event.release.name }} - Resultado da constru√ß√£o: ${{ job.status }}\nLink-PR: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"

          # payload: |
          # slack-message: ":rocket: TECH-NEWS - ${{ github.event.release.tag_name || github.event.release.name }} - Resultado da constru√ß√£o: ${{ job.status }}\nLink-PR: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
          # slack-message: ":rocket: TECH-NEWS"
          # slack-message: |
          #   {
          #     "blocks"[
          #       { "type": "divider" },
          #       { "type": "image", "image_url": ${{ ICON_URL }} },
          #     ]
          #     "text": ":rocket: TECH-NEWS - ${{ github.event.release.tag_name || github.event.release.name }}"
          #     "blocks": [
          #       {
          #         "type": "section",
          #         "text": {
          #           "type": "mrkdwn",
          #           "text": "Resultado da constru√ß√£o: ${{ job.status }}\nLink-PR: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
          #         }
          #       }
          #     ]
          #   }
